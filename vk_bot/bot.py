from vkwave.bots import SimpleLongPollBot, SimpleBotEvent, PhotoUploader
from vkwave.bots.fsm import ForWhat
import logging.config
from logging_config import LOGGING
from bot_config import bot_configuration
from database.fill_data_base import create_and_fill_data_base
from database.get_products_in_sections import get_products_from_current_section
from keyboards.go_back_keyboard import get_go_back_keyboard
from keyboards.section_keyboard import get_section_keyboard
from states.user_state import UserState, user_state_machine

bot = SimpleLongPollBot(tokens=bot_configuration.bot_token, group_id=int(bot_configuration.group_id))
uploader = PhotoUploader(bot.api_context)


@bot.message_handler(bot.regex_filter('(?i)(–Ω–∞—á–∞—Ç—å|—Å—Ç–∞—Ä—Ç)'))
async def greetings(event: SimpleBotEvent) -> SimpleBotEvent.answer:
    """
    –•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å—Ç–∞—Ä—Ç/–Ω–∞—á–∞—Ç—å.
    –†–µ–≥–∏—Å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –≤–∞–∂–µ–Ω.
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏.
    """
    logger.info(f'User: {event.user_id} starts conversation with the bot.')
    await user_state_machine.set_state(event=event, state=UserState.section, for_what=ForWhat.FOR_USER)
    await event.answer(
        message=
        """
        –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –≤—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª ‚ù§Ô∏è
        """,
        keyboard=get_section_keyboard().get_keyboard()
    )


@bot.message_handler(bot.state_filter(fsm=user_state_machine, state=UserState.section, for_what=ForWhat.FOR_USER))
async def get_section(event: SimpleBotEvent) -> SimpleBotEvent.answer:
    """
    –•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    –ü–æ—Å–ª–µ —á–µ–≥–æ –ø–æ –¥–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã.
    """
    await user_state_machine.add_data(
        event=event,
        for_what=ForWhat.FOR_USER,
        state_data={'section': event.object.object.message.text}
    )
    user_data = await user_state_machine.get_data(event=event, for_what=ForWhat.FOR_USER)
    user_chosen_section = user_data.get('section')

    logger.info(f'User: {event.user_id} asked for items in {user_chosen_section} section.')

    await user_state_machine.finish(event=event, for_what=ForWhat.FOR_USER)

    await event.answer(
        message=f'üïñ –ò—â—É —Ç–æ–≤–∞—Ä—ã –≤ —Å–µ–∫—Ü–∏–∏ \"{user_chosen_section}\"'
    )

    products = get_products_from_current_section(user_chosen_section)

    for i_product in products:
        photo = await uploader.get_attachment_from_path(file_path=f"{i_product[2]}", peer_id=event.peer_id)
        await event.answer(
            message=f"""
            üç∞ –ù–∞–∑–≤–∞–Ω–∏–µ: {i_product[0]}
            üìù –û–ø–∏—Å–∞–Ω–∏–µ: {i_product[3]}
            
            üí∏ –¶–µ–Ω–∞: {i_product[1]} —Ä—É–±.
            """,
            attachment=photo
        )

    await event.answer(
        message='–í—Å—ë —á—Ç–æ –Ω–∞—à—ë–ª –≤ –¥–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ üòÄ',
        keyboard=get_go_back_keyboard().get_keyboard()
    )


@bot.message_handler(bot.payload_contains_filter('button'))
async def get_payload(event: SimpleBotEvent) -> SimpleBotEvent.answer:
    """
    –•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç payload –æ—Ç –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥".
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é greetings –ø–æ –Ω–∞–∂–∞—Ç–∏—é.
    """
    await greetings(event)


if __name__ == '__main__':
    logger: logging.Logger = logging.getLogger('bot_logger')
    logging.config.dictConfig(LOGGING)

    create_and_fill_data_base()

    logger.info('Bot starts working.')

    bot.run_forever()
